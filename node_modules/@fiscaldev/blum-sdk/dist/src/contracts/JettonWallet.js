"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlumJettonWallet = void 0;
const core_1 = require("@ton/core");
class BlumJettonWallet {
    constructor(address) {
        this.address = address;
    }
    static createFromAddress(address) {
        return new BlumJettonWallet(address);
    }
    async createTransfer(value, options) {
        const { queryId, amount, destination, responseAddress, customPayload, forwardAmount, forwardPayload } = options;
        return {
            to: this.address,
            value: value,
            body: (0, core_1.beginCell)()
                .storeUint(BlumJettonWallet.TRANSFER, 32)
                .storeUint(queryId ?? 0, 64)
                .storeCoins(amount)
                .storeAddress(destination)
                .storeAddress(responseAddress)
                .storeMaybeRef(customPayload ?? null)
                .storeCoins(forwardAmount ?? 0n)
                .storeMaybeRef(forwardPayload ?? null)
                .endCell(),
        };
    }
    async sendTransfer(provider, via, value, options) {
        const { queryId, amount, destination, responseAddress, customPayload, forwardAmount, forwardPayload } = options;
        await provider.internal(via, {
            value,
            sendMode: core_1.SendMode.PAY_GAS_SEPARATELY,
            body: (0, core_1.beginCell)()
                .storeUint(BlumJettonWallet.TRANSFER, 32)
                .storeUint(queryId ?? 0, 64)
                .storeCoins(amount)
                .storeAddress(destination)
                .storeAddress(responseAddress)
                .storeMaybeRef(customPayload ?? null)
                .storeCoins(forwardAmount ?? 0n)
                .storeMaybeRef(forwardPayload ?? null)
                .endCell(),
        });
    }
    async createSell(options) {
        const { queryId, amount, minReceive, fee, referral = null, value = (0, core_1.toNano)("0.06") } = options;
        return {
            to: this.address,
            value: value + fee,
            body: (0, core_1.beginCell)()
                .storeUint(BlumJettonWallet.SELL, 32)
                .storeUint(queryId ?? 0, 64)
                .storeCoins(amount)
                .storeCoins(minReceive)
                .storeMaybeRef(referral)
                .endCell(),
        };
    }
    async createBurn(value, options) {
        const { queryId, amount, ownerAddress, responseAddress } = options;
        return {
            to: this.address,
            value: value,
            body: (0, core_1.beginCell)()
                .storeUint(BlumJettonWallet.BURN, 32)
                .storeUint(queryId ?? 0, 64)
                .storeCoins(amount)
                .storeAddress(ownerAddress)
                .storeAddress(responseAddress)
                .endCell(),
        };
    }
    async sendBurn(provider, via, value, options) {
        const { queryId, amount, ownerAddress, responseAddress } = options;
        await provider.internal(via, {
            value,
            sendMode: core_1.SendMode.PAY_GAS_SEPARATELY,
            body: (0, core_1.beginCell)()
                .storeUint(BlumJettonWallet.BURN, 32)
                .storeUint(queryId ?? 0, 64)
                .storeCoins(amount)
                .storeAddress(ownerAddress)
                .storeAddress(responseAddress)
                .endCell(),
        });
    }
    async getWalletData(provider) {
        const result = await provider.get('get_wallet_data', []);
        const balance = result.stack.readBigNumber();
        const ownerAddress = result.stack.readAddress();
        const minterAddress = result.stack.readAddress();
        const walletCode = result.stack.readCell();
        return {
            balance,
            ownerAddress,
            minterAddress,
            walletCode,
        };
    }
    async getBalance(provider) {
        const { balance } = await this.getWalletData(provider);
        return balance;
    }
}
exports.BlumJettonWallet = BlumJettonWallet;
BlumJettonWallet.TRANSFER = 0xf8a7ea5;
BlumJettonWallet.TRANSFER_NOTIFICATION = 0x7362d09c;
BlumJettonWallet.INTERNAL_TRANSFER = 0x178d4519;
BlumJettonWallet.BURN = 0x595f07bc;
BlumJettonWallet.EXCESSES = 0xd53276db;
BlumJettonWallet.SELL = 0x742b36d8;
//# sourceMappingURL=JettonWallet.js.map