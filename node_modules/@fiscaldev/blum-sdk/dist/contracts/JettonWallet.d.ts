import { Address, Cell } from '@ton/core';
declare class BlumJettonWallet {
    static TRANSFER: number;
    static TRANSFER_NOTIFICATION: number;
    static INTERNAL_TRANSFER: number;
    static BURN: number;
    static EXCESSES: number;
    static SELL: number;
    address: Address;
    constructor(address: Address);
    static createFromAddress(address: Address): BlumJettonWallet;
    createTransfer(value: bigint, options: {
        queryId?: number;
        amount: bigint;
        destination: Address;
        responseAddress: Address;
        customPayload?: Cell | null;
        forwardAmount?: bigint;
        forwardPayload?: Cell | null;
    }): Promise<{
        to: Address;
        value: bigint;
        body: Cell;
    }>;
    sendTransfer(provider: any, via: Address, value: bigint, options: {
        queryId?: number;
        amount: bigint;
        destination: Address;
        responseAddress: Address;
        customPayload?: Cell | null;
        forwardAmount?: bigint;
        forwardPayload?: Cell | null;
    }): Promise<void>;
    createSell(options: {
        queryId?: number;
        amount: bigint;
        minReceive: bigint;
        fee: bigint;
        referral?: Cell | null;
        value?: bigint;
    }): Promise<{
        to: Address;
        value: bigint;
        body: Cell;
    }>;
    createBurn(value: bigint, options: {
        queryId?: number;
        amount: bigint;
        ownerAddress: Address;
        responseAddress: Address;
    }): Promise<{
        to: Address;
        value: bigint;
        body: Cell;
    }>;
    sendBurn(provider: any, via: Address, value: bigint, options: {
        queryId?: number;
        amount: bigint;
        ownerAddress: Address;
        responseAddress: Address;
    }): Promise<void>;
    getWalletData(provider: any): Promise<{
        balance: bigint;
        ownerAddress: Address;
        minterAddress: Address;
        walletCode: Cell;
    }>;
    getBalance(provider: any): Promise<bigint>;
}
export { BlumJettonWallet };
